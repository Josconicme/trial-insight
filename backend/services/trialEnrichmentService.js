const Trial = require('../models/Trial');

// This service is now only responsible for finding related trials using vector search.
// It no longer does any on-the-fly enrichment.
class TrialEnrichmentService {
    async findRelatedTrials(trialId, limit = 5) {
        // First, get the trial to ensure it has an embedding.
        // The embedding is now expected to be pre-generated by the Atlas Trigger.
        const trial = await Trial.findOne({ nctId: trialId });
        if (!trial || !trial.embedding || trial.embedding.length === 0) {
            console.warn(`Cannot find related trials for ${trialId}, embedding is missing from the database.`);
            return [];
        }

        try {
            // This is the aggregation pipeline that uses the Vector Search index.
            const relatedTrials = await Trial.aggregate([
                {
                    $vectorSearch: {
                        index: "vector_search_index", // This is the name you gave your index in the Atlas UI
                        path: "embedding",
                        queryVector: trial.embedding,
                        numCandidates: 100,
                        limit: limit + 1 // +1 to find the original and then exclude it
                    }
                },
                {
                    $match: {
                        nctId: { $ne: trialId } // Exclude the original trial from the results
                    }
                },
                {
                    $project: {
                        _id: 0,
                        nctId: 1,
                        title: 1,
                        status: 1,
                        conditions: 1,
                        similarity: { $meta: "vectorSearchScore" }
                    }
                }
            ]);
            return relatedTrials;
        } catch (error) {
            // This can happen if the index isn't ready or there's an issue.
            console.warn(`Vector search failed (is the index active and populated?):`, error.message);
            return []; // Return an empty array so the API doesn't crash.
        }
    }
}

module.exports = new TrialEnrichmentService();